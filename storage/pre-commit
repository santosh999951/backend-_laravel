#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
#
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
#
# see the README
PHPCS_BIN=/usr/bin/phpcs
PHPCBF_BIN=/usr/bin/phpcbf
PHPCS_CODING_STANDARD=Guesthouser
PHPCS_IGNORE=
TMP_STAGING=".tmp_staging"

echo "Running Code Quality checks..."

# parse config
CONFIG_FILE=$(dirname $0)/config
if [ -e $CONFIG_FILE ]; then
    . $CONFIG_FILE
fi

# simple check if code sniffer is set up correctly
if [ ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    exit 1
fi


# stolen from template file
check=$(git rev-parse --verify HEAD)
if [ ! -e $check ]
then
   against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic: 
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
   #echo "No file found."
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    #echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
   #echo "no file found."
    exit 0
fi

# execute the code sniffer
if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

if [ "$PHPCS_SNIFFS" != "" ]; then
    SNIFFS="--sniffs=$PHPCS_SNIFFS"
else
    SNIFFS=""
fi

if [ "$PHPCS_ENCODING" != "" ]; then
    ENCODING="--encoding=$PHPCS_ENCODING"
else
    ENCODING=""
fi

if [ "$PHPCS_IGNORE_WARNINGS" == "1" ]; then
    IGNORE_WARNINGS="-n"
else
    IGNORE_WARNINGS=""
fi


# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
#echo "before for"$FILES_TO_CHECK
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done
#echo $PHPCS_BIN -s $IGNORE_WARNINGS  --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $SNIFFS $STAGED_FILES
OUTPUT=$($PHPCS_BIN --report-full --report-summary=./phpcs_report $IGNORE_WARNINGS  --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $SNIFFS $STAGED_FILES)
RETVAL=$?

# delete temporary copy of staging area
rm -rf $TMP_STAGING
#echo "output"$OUTPUT
if [ $RETVAL -ne 0 ];
  then
    echo "Coding standards errors have been detected. Running phpcbf..."
    $PHPCBF_BIN --standard=$PHPCS_CODING_STANDARD $ENCODING -n $FILES_TO_CHECK
    git add $FILES_TO_CHECK
    echo "Running Code Sniffer again..."

    STAGED_FILES=""
    #echo "before for"$FILES_TO_CHECK
    for FILE in $FILES_TO_CHECK
    do
      ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

      # create staged version of file in temporary staging area with the same
      # path as the original file so that the phpcs ignore filters can be applied
      mkdir -p "$TMP_STAGING/$(dirname $FILE)"
      git cat-file blob $ID > "$TMP_STAGING/$FILE"
      STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
    done

    OUTPUT=$($PHPCS_BIN --report-full --report-summary=./phpcs_report $IGNORE_WARNINGS  --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $SNIFFS $STAGED_FILES)
    RETVAL=$?

    # delete temporary copy of staging area
    rm -rf $TMP_STAGING

    if [ $RETVAL -ne 0 ]
    then
      echo "Errors found not fixable automatically"
      echo "Got errors. Generated at: $(date '+%Y-%m-%d %H:%M:%S')" >> ./phpcs_report
      git add phpcs_report
      echo "$OUTPUT" | less
      exit 1
    fi
fi

git add phpcs_report

echo "Passed all the code quality checks. Generated at: $(date '+%Y-%m-%d %H:%M:%S')" >> ./phpcs_report

echo "Well done! You've passed all the code quality checks."

# Run test cases and generate test and code-coverage report

echo "Running unit test cases..."

# Check if Xdebug extension is enable, required for generating code coverage report.
Xdebug=$(php -v | grep 'Xdebug')
if [ ! "$Xdebug" ]; then
  echo "Xdebug extension is not enabled. PHPUnit code coverage requires Xdebug. Please refer to https://serverpilot.io/docs/how-to-install-the-php-xdebug-extension, for installation."
  exit 1
fi

vendor/bin/paratest  --log-junit unit-test-report.xml

if [ $? -ne 0 ]; then
  echo -e "\e[1;31mUnit tests failed! Aborting commit.\e[0m" >&2
  echo "Unit tests failed! Generated at: $(date '+%Y-%m-%d %H:%M:%S')" >> ./phpcs_report
  git add phpcs_report unit-test-report.xml cc-report
  exit 1
fi

echo "Passed all the Unit tests. Generated at: $(date '+%Y-%m-%d %H:%M:%S')" >> ./phpcs_report
git add phpcs_report unit-test-report.xml cc-report

exit $RETVAL
